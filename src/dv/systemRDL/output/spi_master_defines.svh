//----------------------------------------------------------------------------------------------------------------------------
// Autogenerated file -- DO NOT EDIT
//
// This file was autogenerated by PeakRDL-svh
// Date (mm-dd-yyyy) : 02-10-2022  
// Time (hh:mm:ss)   : 00:17:30
//
// This header contains:
// * Register and register field specifiers
// * Position values for fields
// * Mask values for fields
//----------------------------------------------------------------------------------------------------------------------------

`ifndef _SPI_MASTER_DEFINES_INCLUDED_
`define _SPI_MASTER_DEFINES_INCLUDED_

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Register:    SPI Status Register
// Description: Defines the mode of operation
// Access:      RW
//
// Fields:
//     NAME                           WID   POS TYPE RESET       DESCRIPTION
//
//     RESERVED12                     20  31:12 RO   0x0         Reserved for further usage
//
//     CS                             4   11:08 RW   0x0         Specify the chip select signal that should be used for the
//                                                               next transfer
//
//     RESERVED5                      3   07:05 RO   0x0         Reserved for further usage
//
//     SRST                           1       4 RW   0x0         Clear FIFOs and abort active transfers
//
//     QWR                            1       3 RW   0x0         Perform a write using Quad SPI mode
//
//     QRD                            1       2 RW   0x0         Perform a read using Quad SPI mode
//
//     WR                             1       1 RW   0x0         Perform a write using standard SPI mode
//
//     RD                             1       0 RW   0x0         Perform a read using standard SPI mode
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

`define POS_STATUS_CS                                                              8
`define POS_STATUS_SRST                                                            4
`define POS_STATUS_QWR                                                             3
`define POS_STATUS_QRD                                                             2
`define POS_STATUS_WR                                                              1
`define POS_STATUS_RD                                                              0

`define MASK_STATUS_CS                                                    (4'hf<<`POS_STATUS_CS)
`define MASK_STATUS_SRST                                                  (1'h1<<`POS_STATUS_SRST)
`define MASK_STATUS_QWR                                                   (1'h1<<`POS_STATUS_QWR)
`define MASK_STATUS_QRD                                                   (1'h1<<`POS_STATUS_QRD)
`define MASK_STATUS_WR                                                    (1'h1<<`POS_STATUS_WR)
`define MASK_STATUS_RD                                                    (1'h1<<`POS_STATUS_RD)


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Register:    Clock Divider Register
// Description: Defines the clock divider value
// Access:      RW
//
// Fields:
//     NAME                           WID   POS TYPE RESET       DESCRIPTION
//
//     RESERVED8                      24  31:08 RO   0x0         Reserved for further usage
//
//     CLKDIV                         8   07:00 RW   0x0         Clock divider value used to divide the SOC clock for the SPI
//                                                               transfers. This register should not be modified whil a
//                                                               transfer is in progress.
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

`define POS_CLKDIV_CLKDIV                                                          0

`define MASK_CLKDIV_CLKDIV                                                (8'hff<<`POS_CLKDIV_CLKDIV)


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Register:    SPI Command Register
// Description: Specifies the SPI command value
// Access:      RW
//
// Fields:
//     NAME                           WID   POS TYPE RESET       DESCRIPTION
//
//     SPICMD                         32  31:00 RW   0x0         When performing a read or write transfer the SPI command is
//                                                               sent first before any data is read or written. The lenght of
//                                                               the SPI command can be controlled with the SPILEN register
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

`define POS_SPICMD_SPICMD                                                          0

`define MASK_SPICMD_SPICMD                                                (32'hffffffff<<`POS_SPICMD_SPICMD)


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Register:    SPI Address Register
// Description: Specifies the SPI address value
// Access:      RW
//
// Fields:
//     NAME                           WID   POS TYPE RESET       DESCRIPTION
//
//     SPIADR                         32  31:00 RW   0x0         When performing a read or write transfer the SPI command is
//                                                               sent first before any data is read or written, after this
//                                                               the SPI address is sent. The lenght of the SPI command can
//                                                               be controlled with the SPILEN register
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

`define POS_SPIADR_SPIADR                                                          0

`define MASK_SPIADR_SPIADR                                                (32'hffffffff<<`POS_SPIADR_SPIADR)


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Register:    SPI Transfer Length Register
// Description: Defines the number of bits to be sent or received over SPI interface
// Access:      RW
//
// Fields:
//     NAME                           WID   POS TYPE RESET       DESCRIPTION
//
//     DATALEN                        16  31:16 RW   0x0         The number of bits read or written. Note that first the SPI
//                                                               command and address are written to an SPI slave device.
//
//     RESERVED14                     2   15:14 RO   0x0         Reserved for further usage
//
//     ADDRLEN                        6   13:08 RW   0x0         The number of bits of the SPI Address that should be sent.
//
//     RESERVED6                      2   07:06 RO   0x0         Reserved for further usage
//
//     CMDLEN                         6   05:00 RW   0x0         The number of bits of the SPI command that should be sent.
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

`define POS_SPILEN_DATALEN                                                        16
`define POS_SPILEN_ADDRLEN                                                         8
`define POS_SPILEN_CMDLEN                                                          0

`define MASK_SPILEN_DATALEN                                               (16'hffff<<`POS_SPILEN_DATALEN)
`define MASK_SPILEN_ADDRLEN                                               (6'h3f<<`POS_SPILEN_ADDRLEN)
`define MASK_SPILEN_CMDLEN                                                (6'h3f<<`POS_SPILEN_CMDLEN)


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Register:    SPI Dummy Cycles Register
// Description: Defines the dummy cycles between each spi transfer
// Access:      RW
//
// Fields:
//     NAME                           WID   POS TYPE RESET       DESCRIPTION
//
//     DUMMYWR                        16  31:16 RW   0x0         Dummy cycles (nothing being written or read) between sending
//                                                               the SPI command + SPI address + writing the SPI data
//
//     DUMMYRD                        16  15:00 RW   0x0         Dummy cycles (nothing being written or read) between sending
//                                                               the SPI command + SPI address + reading the SPI data
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

`define POS_SPIDUM_DUMMYWR                                                        16
`define POS_SPIDUM_DUMMYRD                                                         0

`define MASK_SPIDUM_DUMMYWR                                               (16'hffff<<`POS_SPIDUM_DUMMYWR)
`define MASK_SPIDUM_DUMMYRD                                               (16'hffff<<`POS_SPIDUM_DUMMYRD)


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Register:    SPI Transmit FIFO Register
// Description: Used for storing the data that'll be written into the FIFO
// Access:      WO
//
// Fields:
//     NAME                           WID   POS TYPE RESET       DESCRIPTION
//
//     TX                             32  31:00 WO   0x0         Write data into the FIFO
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

`define POS_TXFIFO_TX                                                              0

`define MASK_TXFIFO_TX                                                    (32'hffffffff<<`POS_TXFIFO_TX)


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Register:    SPI Receive FIFO Register
// Description: Used for reading the data read from the FIFO
// Access:      RO
//
// Fields:
//     NAME                           WID   POS TYPE RESET       DESCRIPTION
//
//     RX                             32  31:00 RO   0x0         Read data from the FIFO
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

`define POS_RXFIFO_RX                                                              0

`define MASK_RXFIFO_RX                                                    (32'hffffffff<<`POS_RXFIFO_RX)


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Register:    SPI Interrupt Configuration Register
// Description: Defines the interrupt configuration for SPI module
// Access:      RW
//
// Fields:
//     NAME                           WID   POS TYPE RESET       DESCRIPTION
//
//     EN                             1      31 RW   0x0         Used for enabling the interrupts. TODO: Fill this based on
//                                                               the better RTL understanding
//
//     CNTEN                          1      30 RW   0x0         Used for enabling the counters. TODO: Fill this based on the
//                                                               better RTL understanding
//
//     RESERVED29                     1      29 RO   0x0         Reserved bits for further usage. It is 1bit wide based on
//                                                               RTL BUFFER_DEPTH=10
//
//     CNTRX                          5   28:24 RW   0x0         The value of the receive counter to be specified. TODO: Fill
//                                                               this based on the better RTL understanding It is 5bits wide
//                                                               based on RTL BUFFER_DEPTH=10
//
//     RESERVED21                     3   23:21 RO   0x0         Reserved bits for further usage. It is 3bits wide based on
//                                                               RTL BUFFER_DEPTH=10
//
//     CNTTX                          5   20:16 RW   0x0         The value of the transmit counter to be specified. TODO:
//                                                               Fill this based on the better RTL understanding It is 5bits
//                                                               wide based on RTL BUFFER_DEPTH=10
//
//     RESERVED13                     3   15:13 RO   0x0         Reserved bits for further usage. It is 3bits wide based on
//                                                               RTL BUFFER_DEPTH=10
//
//     RHTX                           5   12:08 RW   0x0         The receive fifo threshold at which the event is generated.
//                                                               TODO: Fill this based on the better RTL understanding It is
//                                                               5bits wide based on RTL BUFFER_DEPTH=10
//
//     RESERVED5                      3   07:05 RO   0x0         Reserved bits for further usage. It is 3bits wide based on
//                                                               RTL BUFFER_DEPTH=10
//
//     THTX                           5   04:00 RW   0x0         The transmit fifo threshold at which the event is generated.
//                                                               TODO: Fill this based on the better RTL understanding It is
//                                                               5bits wide based on RTL BUFFER_DEPTH=10
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

`define POS_INTCFG_EN                                                             31
`define POS_INTCFG_CNTEN                                                          30
`define POS_INTCFG_CNTRX                                                          24
`define POS_INTCFG_CNTTX                                                          16
`define POS_INTCFG_RHTX                                                            8
`define POS_INTCFG_THTX                                                            0

`define MASK_INTCFG_EN                                                    (1'h1<<`POS_INTCFG_EN)
`define MASK_INTCFG_CNTEN                                                 (1'h1<<`POS_INTCFG_CNTEN)
`define MASK_INTCFG_CNTRX                                                 (5'h1f<<`POS_INTCFG_CNTRX)
`define MASK_INTCFG_CNTTX                                                 (5'h1f<<`POS_INTCFG_CNTTX)
`define MASK_INTCFG_RHTX                                                  (5'h1f<<`POS_INTCFG_RHTX)
`define MASK_INTCFG_THTX                                                  (5'h1f<<`POS_INTCFG_THTX)



`endif

